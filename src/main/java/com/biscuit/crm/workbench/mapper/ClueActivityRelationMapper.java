package com.biscuit.crm.workbench.mapper;

import com.biscuit.crm.workbench.entity.Clue;
import com.biscuit.crm.workbench.entity.ClueActivityRelation;
import org.apache.ibatis.annotations.Param;

import java.util.List;

public interface ClueActivityRelationMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_clue_activity_relation
     *
     * @mbggenerated Fri Aug 26 11:32:03 CST 2022
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_clue_activity_relation
     *
     * @mbggenerated Fri Aug 26 11:32:03 CST 2022
     */
    int insert(ClueActivityRelation record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_clue_activity_relation
     *
     * @mbggenerated Fri Aug 26 11:32:03 CST 2022
     */
    int insertSelective(ClueActivityRelation record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_clue_activity_relation
     *
     * @mbggenerated Fri Aug 26 11:32:03 CST 2022
     */
    ClueActivityRelation selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_clue_activity_relation
     *
     * @mbggenerated Fri Aug 26 11:32:03 CST 2022
     */
    int updateByPrimaryKeySelective(ClueActivityRelation record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_clue_activity_relation
     *
     * @mbggenerated Fri Aug 26 11:32:03 CST 2022
     */
    int updateByPrimaryKey(ClueActivityRelation record);


    /**
     * 为该市场活动绑定
     * @param carList
     * @return
     */
    int insertClueActivityRelation(@Param("carList") List<ClueActivityRelation> carList);

    /**
     * 根据当前线索的id，删除一条市场活动信息
     * @param activityId
     * @param clueId
     * @return
     */
    int deleteClueActivityRelationByActivityIdAndClueId(@Param("activityId") String activityId , @Param("clueId") String clueId);


    /**
     * 根据线索id，解绑所有与该线索绑定的市场活动信息
     * @param clueId
     * @return
     */
    int deleteManyClueActivityRelationByClueId(@Param("clueId") String clueId);


}