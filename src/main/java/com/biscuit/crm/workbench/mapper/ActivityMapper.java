package com.biscuit.crm.workbench.mapper;

import com.biscuit.crm.workbench.entity.Activity;
import com.biscuit.crm.workbench.entity.ActivityRemark;
import jdk.nashorn.api.tree.LiteralTree;
import org.apache.ibatis.annotations.Param;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Mon Aug 15 15:45:46 CST 2022
     */
    int deleteByPrimaryKey(String id);



    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Mon Aug 15 15:45:46 CST 2022
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Mon Aug 15 15:45:46 CST 2022
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Mon Aug 15 15:45:46 CST 2022
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Mon Aug 15 15:45:46 CST 2022
     */
    int updateByPrimaryKey(Activity record);


    /**
     *  新增一条市场活动记录
     */
    int insertActivity(Activity record);

    /**
     * 根据条件分页查询市场活动数据
     * @param conditionMap
     * @return
     */
    List<Activity> selectActivityByConditionForPage(Map<String , Object> conditionMap);


    /**
     * 根据条件查询符合分页条件的总数据条数
     * @param conditionMap
     * @return
     */
    int selectCountOfActivityByCondition(Map<String , Object> conditionMap);

    /**
     * 根据市场活动id批量删除数据
     * @param ids
     * @return
     */
    int deleteActivityByIds(@Param("ids") String[] ids);


    /**
     * 根据市场活动的 id 查询一条 市场活动信息
     * @param id
     * @return
     */
    Activity selectActivityById(@Param("id") String id);


    /**
     * 根据对象中的 id 修改一条对应的市场活动信息为对象中的数据
     * @param activity
     * @return
     */
    int updateActivity(Activity activity);

    /**
     * 查询所有市场活动信息
     * @return
     */
    List<Activity> selectAllActivity();

    /**
     * 根据列市场活动 id 查询匹配的市场活动数据
     * @param ids
     * @return
     */
    List<Activity> selectActivityByIds(@Param("ids") String[] ids);

    /**
     * 根据市场活动对象集合插入多条市场活动数据
     * @param activityList
     * @return
     */
    int insertMoreActivityByList(@Param("activityList") List<Activity> activityList);

    Activity selectActivityByIdForDetail(@Param("id") String id);


    /**
     * 根据线索 id 查询，该线索关联的市场活动信息
     */
    List<Activity> selectMoreActivityForDetailByClueId(@Param("clueId") String clueId);


    /**
     *
     */
    List<Activity> selectMoreActivityForClueDetailNotClueId(@Param("clueId") String clueId ,@Param("name") String name);


    /**
     * 根据线索id和市场活动名称模糊查询当前线索绑定的市场活动信息
     */
    List<Activity> selectClueBindActivityByClueIdAndLikeActivityName
    (@Param("clueId") String clueId , @Param("activityName") String activityName);


    /**
     * 根据线索id，查询该线索绑定的市场活动信息
     * @param clueId
     * @return
     */
    List<Activity> selectClueBindActivityByClueId(@Param("clueId") String clueId);


    /**
     * 查询所有市场活动信息用于与交易信息绑定，来自新建交易信息页面
     * @return
     */
    List<Activity> selectActivityForTranSave();


    /**
     * 根据市场活动名称模糊查询市场活动信息，来自新建交易信息页面
     * @param name
     * @return
     */
    List<Activity> selectActivityForTranSaveLikeName(@Param("name") String name);



}